#!/usr/bin/perl

# edit_Nworm_orthomcl.pl -- Erich Schwarz <emsch@its.caltech.edu>, 8/18/2007.
# Purpose: change N-worm protein-based orthomcl.out to gene-based, but tolerate 1-gene/protein proteomes.

use strict;
use warnings;

my $input = "";
my %cds2gene = ();

unless (($#ARGV == 3) or ($#ARGV == 4)) { 
    die "Format: edit_3worm_orthomcl.pl",
        " [wormpep, or headers]",
        " [brig_prot2gene]",
        " [pre-rempep, or headers]",
        " [OPTIONAL: pre-pb2801pep, or headers]",
        " [orthomcl.out]\n"; 
}

open (my $WORMPEP, "$ARGV[0]") or die "Can't open wormpep $ARGV[0]: $!";
while ($input = <$WORMPEP>) { 
    chomp $input;
    if ($input =~ /\A > (\S+) \s+ .* \s+ 
                   (WBGene\d+) \s+ /xms) { 
        $cds2gene{"$1(elegans)"} = "$2(elegans)";
    }
}
close $WORMPEP;

# Sample input:
# 
# BP:CBP00003     CBG00001
# BP:CBP20727     CBG00002
# 
# This is generated by ws_brig_prot2gene.pl from a local ACeDB database.

open (my $BRIG_PROT2GENE, "$ARGV[1]") 
    or die "Can't open briggsae protein-to-gene table $ARGV[1]: $!";
while ($input = <$BRIG_PROT2GENE>) { 
    chomp $input;
    if ($input =~ /\A BP: (CBP\d+) \s+ (CBG\d+) /xms) {
        $cds2gene{"$1(briggsae)"} = "$2(briggsae)";
    }
}
close $BRIG_PROT2GENE;

# Sample input:
# 
# >cr01.sctg0.wum.1004.1 Contig0f-snap.94.final
# >cr01.sctg0.wum.1004.2 Contig0f.Fgenesh_Celegans.63.final

open (my $REMPEP, "$ARGV[2]") 
    or die "Can't open preliminary rempep $ARGV[2]: $!";
while ($input = <$REMPEP>) {
    chomp $input;
    if ($input =~ /\A > ( (\S+) \. \d+ ) \s+ /xms) {
        $cds2gene{"$1(remanei)"} = "$2(remanei)";
    }
}
close $REMPEP;

# Don't bother with this if there's no PB2801!
# (N.B.: pretty naive, but I have yet to learn serious Perl-argument-fu.)
if ($#ARGV == 4) { 
    open (my $PB2801PEP, "$ARGV[3]") 
        or die "Can't open preliminary PB2801pep $ARGV[3]: $!";
    while ($input = <$PB2801PEP>) {
        chomp $input;
        if ($input =~ /\A > (Contig\d+\.\d+) \s* /xms) { 
            my $pb2801_cds = $1 . "(pb2801)";
            $cds2gene{$pb2801_cds} = "$pb2801_cds";
        }
    }
    close $PB2801PEP;
}

# Sample input:
# 
# ORTHOMCL3711(5 genes,4 taxa):    CBP24868(briggsae) Contig48.032(pb2801) F44B9.4a(elegans) F44B9.4b(elegans) cr01.sctg49.wum.86.1(remanei)

# '[-1]' index works whether $#ARGV == 3 or 4; orthomcl.out always last.
open (my $ORTHO, "$ARGV[-1]") 
    or die "Can't open N-worm-species OrthoMCL output $ARGV[4]: $!";
while ($input = <$ORTHO>) { 
    chomp $input;
    if ($input =~ /\A (ORTHOMCL\d+)      # $1
                   \(                    # just a '('
                   \d+\sgenes,\d+\staxa  # toss + rewrite later
                   \) : \s+              # just a ')'
                  (.+)                   # $2
                  \s* \z /xms) { 
        my $ortho_grp = $1;
        my @orthoprots = split /\s+/, $2;
        my %species_seen = ();
        my %genes_seen = ();
        foreach my $o_prot (@orthoprots) { 

            # Record each observed species.
            if ( $o_prot =~ /.+ \( (\w+) \) /xms ) { 
                $species_seen{$1} = 1; 
            }

            # Here's where we tolerate naive proteomes:
            #   if a protein->gene mapping doesn't *already* exist,
            #   just equate each protein name with its gene's name.
            #   But prior, sophisticated mappings block this step.
            if (! $cds2gene{$o_prot} ) {
                $cds2gene{"$o_prot"} = "$o_prot";
            }

            # Now record all gene names we're seeing, naive or not.
            $genes_seen{$cds2gene{$o_prot}} = 1;
        }
        my $ortho_no  = scalar(keys %genes_seen);
        my $taxon_no  = scalar(keys %species_seen);
        my @orthologs = sort keys %genes_seen;
        print "$ortho_grp($ortho_no genes,$taxon_no taxa)",
              ":\t ",
              "@orthologs",
              "\n"
              ;
    }
}
close $ORTHO;

